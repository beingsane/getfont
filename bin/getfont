#!/usr/bin/env node

var colors = require('colors');
var fs = require('fs');
var request = require('request');
var cssString = "";
var isIonic=false;
var userAgentMap = {
	ttf:'(none)',
	woff:'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0',
	woff2:'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.86 Safari/537.36',
	eot:'Mozilla/4.0(compatible; MSIE 7.0b; Windows NT 6.0)',
	svg: 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10'
};

var fontSource = process.argv[2];
var par1 = process.argv[3];
var par2 = process.argv[4];


(function getFont() {

	var dirCssFont = './css';
	var dirFileFont = './fonts';
	var nameCssFont = dirCssFont+'/font.css';
	var indexHtml = "./index.html";
	if(par1 == "--ionic" || par2 == "--ionic"){
		isIonic = true;
		if (fs.existsSync("./www")){
		    dirCssFont = './www/css';
			dirFileFont = './www/fonts';
			nameCssFont = dirCssFont+'/font.css';
			indexHtml = "./www/index.html";
		}
	}

	var showIntro = function (){
		console.log("  ___  ____  ____  ____  _____  _  _  ____ ".green);
		console.log(" / __)( ___)(_  _)( ___)(  _  )( \\( )(_  _)".green);
		console.log("( (_-. )__)   )(   )__)  )(_)(  )  (   )(  ".green);
		console.log(" \\___/(____) (__) (__)  (_____)(_)\\_) (__) ".green);

		console.log('\nUsage: getfot "FONT_SOURCES" or "FONT_NAME"');
		console.log('============================================\n');
		console.log('Sources available:');
		console.log('  Google Fonts'.green, '.......: Download the font from Google Fonts by URL');
		console.log('  │','                     --ttf: Get font format .ttf'.yellow);
		console.log('  │','                     --woff: Get font format .woff'.yellow);
		console.log('  │','                     --woff2: Get font format .woff2'.yellow);
		console.log('  │','                     --eot: Get font format .eot'.yellow);
		console.log('  │');
		console.log('  ├── Example: ','getfont "https://fonts.googleapis.com/css?family=Satisfy"'.bold);
		console.log('  ├── Example: ','getfont Ubuntu:300,400,700'.bold);
		console.log('  ├── Example: ','getfont "<link href=\'https://fonts.googleapis.com/css?fa'.bold);
		console.log('  │','		mily=Satisfy\' rel=\'stylesheet\' type=\'text/css\'>"'.bold);
		console.log('  └── Example: ','getfont "https://fonts.googleapis.com/css?family=Satisfy"'.bold,' --eot'.yellow);
		console.log('\n');
	}

	var showDown = function (){
		console.log("  ___  ____  ____  ____  _____  _  _  ____ ".green);
		console.log(" / __)( ___)(_  _)( ___)(  _  )( \\( )(_  _)".green);
		console.log("( (_-. )__)   )(   )__)  )(_)(  )  (   )(  ".green);
		console.log(" \\___/(____) (__) (__)  (_____)(_)\\_) (__) ".green);

		console.log('\nChecking source...'.bold);
	}

	var isFormat = function (f){
		if(!f) f="";
		f = f.replace('--','');
		var r = null;
		for(i in userAgentMap){
			if(i == f){
				r = i;
			}
		}
		return r;
	}

	var posScript = function(){
		if(isIonic){
			if (fs.existsSync(indexHtml)) {
			    fs.readFile(indexHtml, "utf8", function(err, data) {
			        if (err) throw err;
			        if(data.indexOf("css/font.css") < 0){
			        	data = data.replace('<link href="lib/ionic/css/ionic.css" rel="stylesheet">','<link href="lib/ionic/css/ionic.css" rel="stylesheet">\n    <!-- GetFont -->\n    <link href="css/font.css" rel="stylesheet">\n    <!-- End GetFont -->');
				        //console.log(data);
				        fs.writeFile(indexHtml, data, function(err) {
						    if(err) {
						        console.log("Error write "+indexHtml+":".red, err);
						    } else {
				        		console.log("Added call font.css in: ".green, indexHtml.bold);
				        	}
						}); 
			        } else {
			        	console.log("Call for font.css already exists in the file: ".yellow+indexHtml.yellow+"!".yellow);
			        }
			    });
			} else {
				console.log("File "+indexHtml+" not found!".red);
			}
		}
	}

	var checkAndDownloadFont = function (){
		var f = cssString.split('url(https')[1];
		var link = "https"+f.split(')')[0];
		var n = link.split('/');
		var newLink = n[n.length-1];

		// console.log("\n\n",link)
		// console.log("\n\n",newLink)
		var options = {
		    url: link,
		    headers: {
		        'User-Agent': typeFont
		    },
		    encoding: null
		};
		request(options, function (error, response, body) {
		  if (!error && response.statusCode == 200) {
		    //console.log(body) // Show the HTML for the Google homepage. 
		    if (!fs.existsSync(dirFileFont)){
			    fs.mkdirSync(dirFileFont);
			}
			fs.writeFile(dirFileFont+"/"+newLink, body, function(err) {
			    if(err) {
			        return console.log(err);
			    }
			    console.log("Download font: ".green , dirFileFont+"/"+newLink.bold);
			    cssString = cssString.replace(link, "../fonts/"+newLink);
				if(cssString.indexOf('url(https') < 0){
					writeCss();
				} else {
					checkAndDownloadFont();
				}
			}); 
		  } else {
		  	if(response.statusCode == 404){
		  		console.log("Error get font: URL font source does not exist! ".red);
		  	} else {
		  		console.log("Error get font! ".red);
		  	}
		  }
		});
	}
	var writeCss = function (){
		if (!fs.existsSync(dirCssFont)){
		    fs.mkdirSync(dirCssFont);
		}
		fs.writeFile(nameCssFont, cssString, function(err) {
		    if(err) {
		        return console.log(err);
		    }
		    console.log("Create css file: ".green , nameCssFont.bold);
		    posScript();
		}); 
	}
	if(!fontSource){
		showIntro();
	} else {
		var typeFont = isFormat(par1);
		if(!typeFont){
			typeFont = isFormat(par2);
		}
		if(typeFont) {
			typeFont = userAgentMap[typeFont];
			if(!typeFont) {
				typeFont = userAgentMap["woff2"];
			}
		} else {
			typeFont = userAgentMap["woff2"];
		}
		showDown();
		if(fontSource.indexOf('href=') >= 0 || fontSource.indexOf('<link') >= 0){
			fontSource = fontSource.split("href='")[1].split("' rel=")[0];
		} else if (fontSource.indexOf('://') < 0) {
			var urlFormat = "https://fonts.googleapis.com/css?family="+fontSource;
			fontSource = urlFormat;
		}
		//validar origem quando implementar novas
		var options = {
		    url: fontSource,
		    headers: {
		        'User-Agent': typeFont
		    }
		};
		request(options, function (error, response, body) {
		  if (!error && response.statusCode == 200) {
		    //console.log(body) // Show the HTML for the Google homepage. 
		    if (isIonic && !fs.existsSync(dirCssFont)){
			    console.log("You are not within a project folder Ionic!".red);
			} else {
				cssString = body;
				checkAndDownloadFont();
			}
		  } else {
		  	if(response.statusCode == 404){
		  		console.log("Error get font: URL does not exist! ".red);
		  	} else {
		  		console.log("Error get font! ".red);
		  	}
		  }
		})
	}
})();
